diff --git a/node_modules/@arbitrum/sdk/dist/lib/inbox/inbox.js b/node_modules/@arbitrum/sdk/dist/lib/inbox/inbox.js
index c364df4..de5ae43 100644
--- a/node_modules/@arbitrum/sdk/dist/lib/inbox/inbox.js
+++ b/node_modules/@arbitrum/sdk/dist/lib/inbox/inbox.js
@@ -121,7 +121,7 @@ class InboxTools {
             {
                 targetAddr: sequencerInbox.address,
                 encoder: () => sequencerInbox.interface.encodeFunctionData('maxTimeVariation'),
-                decoder: (returnData) => sequencerInbox.interface.decodeFunctionResult('maxTimeVariation', returnData)[0],
+                decoder: (returnData) => sequencerInbox.interface.decodeFunctionResult('maxTimeVariation', returnData),
             },
             multicall.getBlockNumberInput(),
             multicall.getCurrentBlockTimestampInput(),
@@ -185,6 +185,7 @@ class InboxTools {
         // no events appeared within that time period
         if (events.length === 0)
             return null;
+
         // take the last event - as including this one will include all previous events
         const eventInfo = events[events.length - 1];
         const sequencerInbox = SequencerInbox__factory_1.SequencerInbox__factory.connect(this.childChain.ethBridge.sequencerInbox, this.parentProvider);
@@ -260,9 +261,11 @@ class InboxTools {
         if (!(0, lib_1.isDefined)(tx.to)) {
             tx.to = ethers_1.ethers.constants.AddressZero;
         }
+
         //estimate gas on child chain
         try {
-            tx.gasLimit = (await this.estimateArbitrumGas(tx, childSigner.provider)).gasEstimateForChild;
+            // TODO:
+            // tx.gasLimit = (await this.estimateArbitrumGas(tx, childSigner.provider)).gasEstimateForChild;
         }
         catch (error) {
             throw new errors_1.ArbSdkError('execution failed (estimate gas failed)');
@@ -270,7 +273,8 @@ class InboxTools {
         if (contractCreation) {
             delete tx.to;
         }
-        return await childSigner.signTransaction(tx);
+
+        return (await childSigner.sendTransaction(tx)).hash;
     }
 }
 exports.InboxTools = InboxTools;
