generator client {
  provider = "prisma-client-js"
  binaryTargets = ["rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String              @id @default(uuid()) @db.Uuid
  address      String              @unique
  chains       Chain[]
  transactions Transaction[]
  favorites    UserFavoriteChain[]

  @@map("users")
}

model Transaction {
  id                    String   @id @default(uuid()) @db.Uuid
  bridgeHash            String   @unique
  amount                String
  claimStatus           String   @default("PENDING")
  parentChainId         Int
  childChainId          Int
  account               String?
  createdAt             DateTime @default(now())
  delayedInboxHash      String?
  userAddress           String
  delayedInboxTimestamp BigInt?
  user                  User     @relation(fields: [userAddress], references: [address])

  @@map("transactions")
}

model Chain {
  name                String
  chainId             String
  parentChainId       Int?
  isTestnet           Boolean             @default(false)
  isCustom            Boolean             @default(false)
  isOrbit             Boolean             @default(false)
  featured            Boolean             @default(false)
  logoURI             String?
  confirmPeriodBlocks Int?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  blockExplorers      Json?
  contracts           Json?
  ethBridge           Json?
  explorer            Json?
  nativeCurrency      Json?
  rpcUrls             Json?
  testnet             Boolean?            @default(false)
  userAddress         String?
  id                  Int                 @id @default(autoincrement())
  user                User?               @relation(fields: [userAddress], references: [address])
  userFavorites       UserFavoriteChain[]
  tokenBridge         Json?

  @@unique([chainId, userAddress])
  @@map("chains")
}

model UserFavoriteChain {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  userAddress String
  chainId     Int
  chain       Chain    @relation(fields: [chainId], references: [id])
  user        User     @relation(fields: [userAddress], references: [address])

  @@unique([userAddress, chainId])
  @@map("user_favorite_chains")
}
