import { BigNumber } from "ethers";
import { formatEther, parseUnits } from "ethers/lib/utils";
import { createPublicClient, http } from "viem";
import { arbitrumSepolia, sepolia } from "viem/chains";
import { EstimateGasParameters } from "wagmi/actions";

interface ITx { to: `0x${string}`, data: `0x${string}` }

//todo: to should be depend on mainnet/sepolia
export const MockL1SendL2MessageTx: ITx = { to: "0xaAe29B0366299461418F5324a79Afc425BE5ae21", data: "0xb75436bb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002104c36d4653231062d414b13589c398617e80548a539073feb0d0cb3ec7bb39b35500000000000000000000000000000000000000000000000000000000000000", }
export const MockL2WithdrawTx: ITx = {to: "0x0000000000000000000000000000000000000064",data: "0x25e1606300000000000000000000000044cda3f339444f2fd5c34783c0d0d487e5dc0f27"};
export const MockL1ClaimTx: ITx = {to: "0x65f07C7D521164a4d5DaC6eB8Fac8DA067A3B78F",data: "0x08635a950000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000a97600000000000000000000000044cda3f339444f2fd5c34783c0d0d487e5dc0f2700000000000000000000000044cda3f339444f2fd5c34783c0d0d487e5dc0f2700000000000000000000000000000000000000000000000000000000042268ca0000000000000000000000000000000000000000000000000000000000626b6f0000000000000000000000000000000000000000000000000000000066b2833b00000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000001095ccea3861e2d5acc4bdbca3aa6187c17b87c98211dd2eda3b11a36e62ad5c7eecc95b72d25b04a212a7a0edc430b4883d8387f0efa9e748fb1ec01cd1099cd498bcd1661f1cfcdcc725d0680dd67dd8ea25eda6cfb70d947f098b7c439414c4fa0c1a60280864b6d674091ab612a06dd28f1942eb30ee0ab54c13c71031a3e9fa5558d60f39ab0ec1e994047dd29cac2b778384a3c74868f3b8e847d71b84043f3699e25bd92d831832f63f4d9e9dc62940f3131ddfcd42d1589788c68f071f9dd70781737223afc9009c433999bffcd96a968f7cc4324e2f19383bed24cf8c0000000000000000000000000000000000000000000000000000000000000000fec6e4f23bb5fa9911d56371921a3b97d0a802a02205cc9692679df82ef1aea50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094e4fd8e8c4c336d2de9f3a90bd1158c1e0aa7028f1203e3551561a47f7e32fa00000000000000000000000000000000000000000000000000000000000000002294badf7c44e53f41bae6fe36f21ebbaa54289211a899b9bb5e749ccbf616e800000000000000000000000000000000000000000000000000000000000000002f86ac8a2a68cf6ce30fcd1cd902e5c7818b7f17133185bb5868dfcf68c64f020000000000000000000000000000000000000000000000000000000000000000"};

export async function getL1TxPrice(tx: EstimateGasParameters) {
    const ethClient = createPublicClient({
      chain: sepolia,
      transport: http()
    });
    const gasPrice = await ethClient.getGasPrice().then(x => BigNumber.from(x));
    const estimated = await ethClient.estimateGas(tx);
    const L1BaseFee = parseUnits("1500000000", "wei");
    const L1TxPrice = formatEther(BigNumber.from(estimated).mul(gasPrice.add(L1BaseFee)))

    return L1TxPrice;
  }

export async function getL2TxPrice(tx: EstimateGasParameters) {
    const arbClient = createPublicClient({
      chain: arbitrumSepolia,
      transport: http()
    });
    const gasPrice = await arbClient.getGasPrice().then(x => BigNumber.from(x));
    const estimated = await arbClient.estimateGas({ ...tx, });
    const L2TxPrice = formatEther(BigNumber.from(estimated).mul(gasPrice));

    return L2TxPrice;
  }